name: CI/CD Pipeline

on:
  push:
    branches:
      - Master
  pull_request:
    branches:
      - Master

env:
  DOCKER_COMPOSE_FILE: docker-compose.yml
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-and-validate:
    runs-on: ubuntu-latest

    services:
      # Spin up RabbitMQ for validation
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Spin up Redis for validation
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout code using git commands
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }} .
          git checkout ${{ github.sha }}

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          # Install Docker Compose v2
          COMPOSE_VERSION=2.29.2
          curl -SL https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-linux-x86_64 -o docker-compose
          chmod +x docker-compose
          sudo mv docker-compose /usr/local/bin/docker-compose
          docker-compose --version

      # Install Docker Buildx manually
      - name: Install Docker Buildx
        run: |
          # Install Buildx
          BUILDX_VERSION=0.17.1
          curl -LO https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-amd64
          chmod +x buildx-v${BUILDX_VERSION}.linux-amd64
          sudo mv buildx-v${BUILDX_VERSION}.linux-amd64 /usr/local/bin/docker-buildx
          # Enable Buildx
          docker buildx create --use --name mybuilder
          docker buildx inspect --bootstrap

      # Log in to GitHub Container Registry
      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      # Build and validate services
      - name: Build and validate services
        run: |
          # Build all services
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} build

          # Start services in the background
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d

          # Wait for services to be healthy
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
          sleep 30 # Adjust if services take longer to start

          # Check if services are running
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps --services --filter "status=running" > running_services.txt
          if [ ! -s running_services.txt ]; then
            echo "Error: No services are running!"
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs
            exit 1
          fi

          # Tear down services
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

      # Push images to GHCR (on main branch)
      - name: Push images to GHCR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Tag and push each service image
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} config --services | while read -r service; do
            image="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:latest"
            docker tag "${service}" "${image}"
            docker push "${image}"
          done

  deploy:
    needs: build-and-validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      # Checkout code using git commands
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }} .
          git checkout ${{ github.sha }}

      # Placeholder: Deploy to target environment
      - name: Deploy to Server
        run: |
          echo "Deploying to target environment (e.g., Kubernetes or cloud server)"
          # Example for SSH-based deployment:
          # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh-key.pem
          # chmod 600 ssh-key.pem
          # ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
          #   cd /path/to/project &&
          #   docker-compose pull &&
          #   docker-compose up -d
          # '
          echo "Deployment placeholder - implement with your deployment strategy"
