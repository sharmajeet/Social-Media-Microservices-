name: CI/CD Pipeline

on:
  push:
    branches:
      - Master
  pull_request:
    branches:
      - Master

env:
  DOCKER_COMPOSE_FILE: docker-compose.yml
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  build-and-validate:
    runs-on: ubuntu-latest

    services:
      rabbitmq:
        image: rabbitmq:3.13-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Install Docker Compose
        run: |
          COMPOSE_VERSION=2.29.2
          curl -SL https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-linux-x86_64 -o docker-compose
          chmod +x docker-compose
          sudo mv docker-compose /usr/local/bin/docker-compose
          docker-compose --version

      - name: Install Docker Buildx
        run: |
          BUILDX_VERSION=0.17.1
          curl -LO https://github.com/docker/buildx/releases/download/v${BUILDX_VERSION}/buildx-v${BUILDX_VERSION}.linux-amd64
          chmod +x buildx-v${BUILDX_VERSION}.linux-amd64
          sudo mv buildx-v${BUILDX_VERSION}.linux-amd64 /usr/local/bin/docker-buildx
          docker buildx create --use --name mybuilder
          docker buildx inspect --bootstrap

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build and validate services
        run: |
          # Build all services
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} build

          # Fix npm vulnerabilities for custom services
          for service in api-gateway identity-service post-service media-service search-service resume-parser-service; do
            if [ -d "${service}" ]; then
              echo "Running npm audit fix for ${service}"
              docker run --rm -v $(pwd)/${service}:/usr/src/app -w /usr/src/app node:18-alpine npm audit fix || true
            fi
          done

          # Start services in the background
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d

          # Wait for services to be healthy
          for service in $(docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} config --services); do
            echo "Waiting for ${service} to be healthy..."
            timeout 120s bash -c "until docker inspect \$(docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps -q ${service}) | grep -q '\"Status\": \"healthy\"' || [ \"\$(docker inspect \$(docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps -q ${service}) | grep '\"Status\":' | awk '{print \$2}' | tr -d '\"')\" = \"running\" ]; do sleep 5; done" || {
              echo "Service ${service} failed to become healthy!"
              docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs ${service}
              exit 1
            }
          done

          # Check if services are running
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps --services --filter "status=running" > running_services.txt
          if [ ! -s running_services.txt ]; then
            echo "Error: No services are running!"
            docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs
            exit 1
          fi

          # Tear down services
          docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

      - name: Push images to GHCR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Push only custom-built images (exclude rabbitmq, redis, rabbitscout)
          for service in api-gateway identity-service post-service media-service search-service resume-parser-service; do
            image="${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${service}:latest"
            docker tag "${service}" "${image}"
            docker push "${image}"
          done

  deploy:
    needs: build-and-validate
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Deploy to Server
        run: |
          echo "Deploying to target environment (e.g., Kubernetes or cloud server)"
          echo "Deployment placeholder - implement with your deployment strategy"
